/* automatically generated by rust-bindgen 0.59.2 */

pub const MIDI_OMNI_CHANNEL: i32 = -1;
impl MidiStatus {
    pub const STATUS_BYTE: MidiStatus = MidiStatus(128);
}
impl MidiStatus {
    pub const NOTE_OFF: MidiStatus = MidiStatus(128);
}
impl MidiStatus {
    pub const NOTE_ON: MidiStatus = MidiStatus(144);
}
impl MidiStatus {
    pub const POLY_KEY_PRESSURE: MidiStatus = MidiStatus(160);
}
impl MidiStatus {
    pub const CONTROL_CHANGE: MidiStatus = MidiStatus(176);
}
impl MidiStatus {
    pub const PROGRAM_CHANGE: MidiStatus = MidiStatus(192);
}
impl MidiStatus {
    pub const CHANNEL_PRESSURE: MidiStatus = MidiStatus(208);
}
impl MidiStatus {
    pub const PITCH_BEND_CHANGE: MidiStatus = MidiStatus(224);
}
impl MidiStatus {
    pub const SYSTEM_COMMON: MidiStatus = MidiStatus(240);
}
impl MidiStatus {
    pub const SYSEX: MidiStatus = MidiStatus(240);
}
impl MidiStatus {
    pub const TIME_CODE_QUARTER_FRAME: MidiStatus = MidiStatus(241);
}
impl MidiStatus {
    pub const SONG_POSITION_PTR: MidiStatus = MidiStatus(242);
}
impl MidiStatus {
    pub const SONG_SELECT: MidiStatus = MidiStatus(243);
}
impl MidiStatus {
    pub const RESERVED_F4: MidiStatus = MidiStatus(244);
}
impl MidiStatus {
    pub const RESERVED_F5: MidiStatus = MidiStatus(245);
}
impl MidiStatus {
    pub const TUNE_REQUEST: MidiStatus = MidiStatus(246);
}
impl MidiStatus {
    pub const SYSEX_EOX: MidiStatus = MidiStatus(247);
}
impl MidiStatus {
    pub const SYSTEM_REAL_TIME: MidiStatus = MidiStatus(248);
}
impl MidiStatus {
    pub const TIMING_CLOCK: MidiStatus = MidiStatus(248);
}
impl MidiStatus {
    pub const RESERVED_F9: MidiStatus = MidiStatus(249);
}
impl MidiStatus {
    pub const START: MidiStatus = MidiStatus(250);
}
impl MidiStatus {
    pub const CONTINUE: MidiStatus = MidiStatus(251);
}
impl MidiStatus {
    pub const STOP: MidiStatus = MidiStatus(252);
}
impl MidiStatus {
    pub const RESERVED_FD: MidiStatus = MidiStatus(253);
}
impl MidiStatus {
    pub const ACTIVE_SENSING: MidiStatus = MidiStatus(254);
}
impl MidiStatus {
    pub const SYSTEM_RESET: MidiStatus = MidiStatus(255);
}
impl MidiStatus {
    pub const MIDI_CHANNEL_MASK: MidiStatus = MidiStatus(15);
}
impl MidiStatus {
    pub const MIDI_STATUS_MASK: MidiStatus = MidiStatus(240);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct MidiStatus(pub u32);
impl MidiControlChange {
    pub const MIDI_CC_MODULATION: MidiControlChange = MidiControlChange(1);
}
impl MidiControlChange {
    pub const MIDI_CC_BREATH: MidiControlChange = MidiControlChange(2);
}
impl MidiControlChange {
    pub const MIDI_CC_VOLUME: MidiControlChange = MidiControlChange(7);
}
impl MidiControlChange {
    pub const MIDI_CC_BALANCE: MidiControlChange = MidiControlChange(8);
}
impl MidiControlChange {
    pub const MIDI_CC_PAN: MidiControlChange = MidiControlChange(10);
}
impl MidiControlChange {
    pub const MIDI_CC_EXPRESSION: MidiControlChange = MidiControlChange(11);
}
impl MidiControlChange {
    pub const MIDI_CC_EFFECT_CTRL_1: MidiControlChange = MidiControlChange(12);
}
impl MidiControlChange {
    pub const MIDI_CC_EFFECT_CTRL_2: MidiControlChange = MidiControlChange(13);
}
impl MidiControlChange {
    pub const MIDI_CC_SUSTAIN_PEDAL: MidiControlChange = MidiControlChange(64);
}
impl MidiControlChange {
    pub const MIDI_CC_PORTAMENTO: MidiControlChange = MidiControlChange(65);
}
impl MidiControlChange {
    pub const MIDI_CC_FILTER_RESONANCE: MidiControlChange = MidiControlChange(71);
}
impl MidiControlChange {
    pub const MIDI_CC_FREQUENCY_CUTOFF: MidiControlChange = MidiControlChange(74);
}
impl MidiControlChange {
    pub const MIDI_ALL_SOUND_OFF: MidiControlChange = MidiControlChange(120);
}
impl MidiControlChange {
    pub const MIDI_RESET_ALL_CTRLS: MidiControlChange = MidiControlChange(121);
}
impl MidiControlChange {
    pub const MIDI_LOCAL_CONTROL: MidiControlChange = MidiControlChange(122);
}
impl MidiControlChange {
    pub const MIDI_ALL_NOTES_OFF: MidiControlChange = MidiControlChange(123);
}
impl MidiControlChange {
    pub const MIDI_OMNI_MODE_OFF: MidiControlChange = MidiControlChange(124);
}
impl MidiControlChange {
    pub const MIDI_OMNI_MODE_ON: MidiControlChange = MidiControlChange(125);
}
impl MidiControlChange {
    pub const MIDI_MONO_MODE_ON: MidiControlChange = MidiControlChange(126);
}
impl MidiControlChange {
    pub const MIDI_POLY_MODE_ON: MidiControlChange = MidiControlChange(127);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct MidiControlChange(pub u32);
impl UsbMidi {
    pub const USB_COMMAND_MISC: UsbMidi = UsbMidi(0);
}
impl UsbMidi {
    pub const USB_COMMAND_CABLE_EVENT: UsbMidi = UsbMidi(1);
}
impl UsbMidi {
    pub const USB_COMMAND_2BYTE_SYSTEM_COMMON: UsbMidi = UsbMidi(2);
}
impl UsbMidi {
    pub const USB_COMMAND_3BYTE_SYSTEM_COMMON: UsbMidi = UsbMidi(3);
}
impl UsbMidi {
    pub const USB_COMMAND_SYSEX: UsbMidi = UsbMidi(4);
}
impl UsbMidi {
    pub const USB_COMMAND_SYSEX_EOX1: UsbMidi = UsbMidi(5);
}
impl UsbMidi {
    pub const USB_COMMAND_SYSEX_EOX2: UsbMidi = UsbMidi(6);
}
impl UsbMidi {
    pub const USB_COMMAND_SYSEX_EOX3: UsbMidi = UsbMidi(7);
}
impl UsbMidi {
    pub const USB_COMMAND_NOTE_OFF: UsbMidi = UsbMidi(8);
}
impl UsbMidi {
    pub const USB_COMMAND_NOTE_ON: UsbMidi = UsbMidi(9);
}
impl UsbMidi {
    pub const USB_COMMAND_POLY_KEY_PRESSURE: UsbMidi = UsbMidi(10);
}
impl UsbMidi {
    pub const USB_COMMAND_CONTROL_CHANGE: UsbMidi = UsbMidi(11);
}
impl UsbMidi {
    pub const USB_COMMAND_PROGRAM_CHANGE: UsbMidi = UsbMidi(12);
}
impl UsbMidi {
    pub const USB_COMMAND_CHANNEL_PRESSURE: UsbMidi = UsbMidi(13);
}
impl UsbMidi {
    pub const USB_COMMAND_PITCH_BEND_CHANGE: UsbMidi = UsbMidi(14);
}
impl UsbMidi {
    pub const USB_COMMAND_SINGLE_BYTE: UsbMidi = UsbMidi(15);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct UsbMidi(pub u32);
impl OwlProtocol {
    pub const OWL_COMMAND_DISCOVER: OwlProtocol = OwlProtocol(160);
}
impl OwlProtocol {
    pub const OWL_COMMAND_PARAMETER: OwlProtocol = OwlProtocol(176);
}
impl OwlProtocol {
    pub const OWL_COMMAND_COMMAND: OwlProtocol = OwlProtocol(192);
}
impl OwlProtocol {
    pub const OWL_COMMAND_MESSAGE: OwlProtocol = OwlProtocol(208);
}
impl OwlProtocol {
    pub const OWL_COMMAND_DATA: OwlProtocol = OwlProtocol(224);
}
impl OwlProtocol {
    pub const OWL_COMMAND_RESET: OwlProtocol = OwlProtocol(240);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OwlProtocol(pub u32);
